{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","name","message","messages","handleSubmit","bind","socket","socketIOClient","on","getMessages","console","log","this","axios","get","then","res","setState","data","map","className","catch","err","e","key","preventDefault","post","delete","Container","Button","color","onClick","handleDelete","Form","onSubmit","FormGroup","Label","for","Input","type","placeholder","value","onChange","target","onKeyDown","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"oTAuHeA,E,kDA9Gb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,KAAM,GACNC,QAAS,GACTC,SAAU,IAGZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAEpB,EAAKC,OAASC,MAEd,EAAKD,OAAOE,GAAG,WAAW,kBAAM,EAAKC,iBACrC,EAAKH,OAAOE,GAAG,SAAS,SAACN,GAAD,OAAaQ,QAAQC,IAAIT,MAdhC,E,gEAkBjBU,KAAKH,cACLC,QAAQC,IAAI,a,oCAGC,IAAD,OACZE,IACGC,IAAI,aACJC,MAAK,SAACC,GAAD,OACJ,EAAKC,SAAS,CACZd,SAAUa,EAAIE,KAAKC,KAAI,SAACjB,GAAD,OACrB,yBACEkB,UACElB,EAAQD,OAAS,EAAKD,MAAMC,KACxB,wBACA,2BAGN,yBACEmB,UACElB,EAAQD,OAAS,EAAKD,MAAMC,KACxB,oBACA,uBAGN,2BAAIC,EAAQA,UAEd,yBACEkB,UACElB,EAAQD,OAAS,EAAKD,MAAMC,KAAO,WAAa,cAGjDC,EAAQD,eAMlBoB,OAAM,SAACC,GAAD,OAASZ,QAAQC,IAAIW,Q,mCAGnBC,GACG,UAAVA,EAAEC,KAAoBD,EAAEC,MAC1BD,EAAEE,iBACFZ,IAAMa,KAAK,YAAad,KAAKZ,OAC7BY,KAAKK,SAAS,CAAEf,QAAS,Q,qCAK3BW,IAAMc,OAAO,aAAaN,OAAM,SAACC,GAAD,OAASZ,QAAQC,IAAIW,Q,+BAG7C,IAAD,OACP,OACE,yBAAKF,UAAU,OACb,kBAACQ,EAAA,EAAD,CAAWR,UAAU,+CACnB,kBAACS,EAAA,EAAD,CACEC,MAAM,SACNV,UAAU,gBACVW,QAASnB,KAAKoB,cAHhB,uBAOA,yBAAKZ,UAAU,YAAYR,KAAKZ,MAAMG,UACtC,kBAAC8B,EAAA,EAAD,CAAMC,SAAUtB,KAAKR,cACnB,kBAAC+B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,QAAX,QACA,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,2BACZC,MAAO7B,KAAKZ,MAAMC,KAClByC,SAAU,SAACnB,GAAD,OAAO,EAAKN,SAAS,CAAEhB,KAAMsB,EAAEoB,OAAOF,YAGpD,kBAACN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,iBAAX,WACA,kBAACC,EAAA,EAAD,CACEC,KAAK,WACLC,YAAY,2BACZC,MAAO7B,KAAKZ,MAAME,QAClBwC,SAAU,SAACnB,GAAD,OAAO,EAAKN,SAAS,CAAEf,QAASqB,EAAEoB,OAAOF,SACnDG,UAAWhC,KAAKR,gBAGpB,kBAACyB,EAAA,EAAD,CAAQU,KAAK,UAAb,uB,GAvGMM,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAyC,GACLpD,QAAQoD,MAAMA,EAAM5D,a","file":"static/js/main.5a6a0b30.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Container, FormGroup, Form, Input, Label, Button } from \"reactstrap\";\nimport axios from \"axios\";\nimport socketIOClient from \"socket.io-client\";\n// const serverURI = \"https://enigmatic-sierra-05542.herokuapp.com/\";\n// const serverURI = \"https://mern-chat-app-socketio.herokuapp.com\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      message: \"\",\n      messages: [],\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.socket = socketIOClient();\n\n    this.socket.on(\"message\", () => this.getMessages());\n    this.socket.on(\"hello\", (message) => console.log(message));\n  }\n\n  componentDidMount() {\n    this.getMessages();\n    console.log(\"mounted\");\n  }\n\n  getMessages() {\n    axios\n      .get(\"/messages\")\n      .then((res) =>\n        this.setState({\n          messages: res.data.map((message) => (\n            <div\n              className={\n                message.name === this.state.name\n                  ? \"message-container-own\"\n                  : \"message-container-other\"\n              }\n            >\n              <div\n                className={\n                  message.name === this.state.name\n                    ? \"speach-bubble-own\"\n                    : \"speach-bubble-other\"\n                }\n              >\n                <p>{message.message}</p>\n              </div>\n              <div\n                className={\n                  message.name === this.state.name ? \"name-own\" : \"name-other\"\n                }\n              >\n                {message.name}\n              </div>\n            </div>\n          )),\n        })\n      )\n      .catch((err) => console.log(err));\n  }\n\n  handleSubmit(e) {\n    if (e.key === \"Enter\" || !e.key) {\n      e.preventDefault();\n      axios.post(\"/messages\", this.state);\n      this.setState({ message: \"\" });\n    }\n  }\n\n  handleDelete() {\n    axios.delete(\"/messages\").catch((err) => console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container className=\"themed-container border shadow p-3 rounded \">\n          <Button\n            color=\"danger\"\n            className=\"delete-button\"\n            onClick={this.handleDelete}\n          >\n            Delete All Messages\n          </Button>\n          <div className=\"messages\">{this.state.messages}</div>\n          <Form onSubmit={this.handleSubmit}>\n            <FormGroup>\n              <Label for=\"name\">Name</Label>\n              <Input\n                type=\"text\"\n                placeholder=\"Insert screen name here.\"\n                value={this.state.name}\n                onChange={(e) => this.setState({ name: e.target.value })}\n              ></Input>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"input message\">Message</Label>\n              <Input\n                type=\"textarea\"\n                placeholder=\"Write your message here.\"\n                value={this.state.message}\n                onChange={(e) => this.setState({ message: e.target.value })}\n                onKeyDown={this.handleSubmit}\n              ></Input>\n            </FormGroup>\n            <Button type=\"submit\">Send Message</Button>\n          </Form>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}